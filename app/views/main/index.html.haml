- currency = @state.testnet? ? "testnet peercoin" : "peercoin"

%header.main-header
  .header-content
    %h1.title
      - if @state.testnet?
        Peercoin Testnet Faucet
      - else
        Peercoin Faucet
    %p.intro
      On this site you can give or receive free #{currency.pluralize}
    - if @state.testnet?
      .testnet-warning
        .content Testnet peercoins are not real peercoins. They are only useful for developpers and have absolutely no monetary value!
%section.main-content
  %article.receive-section
    .content
      %h2.title Receive #{currency.pluralize}
      %p.description
        You can receive #{pluralize FaucetConfig["amount_per_request"], currency} just by filling the form below.
        %br
        The #{currency.pluralize} are given by donators. Your request will only be processed if enough #{currency.pluralize} are available.

      .receive-form
        = form_for @coin_request, url: url_for do |f|
          - if @coin_request.errors.any?
            .errors
              .intro Some errors blocked your request:
              .list
                - @coin_request.errors.full_messages.each do |error|
                  .error= error
          .address-field
            = f.label :address, "Your #{currency} address"
            = f.text_field :address
          - if FaucetConfig["captcha"]
            .captcha
              = recaptcha_tags ssl: request.ssl?, ajax: true
          .submit
            = f.submit "Receive #{currency.pluralize}"
      %p.limit-notice
        Your IP is limited to 1 request every #{distance_of_time_in_words FaucetConfig.request_time_frame_duration}.
        %br
        Requests are fulfilled every #{distance_of_time_in_words FaucetConfig.time_between_request_fulfilling}.
  %article.give-section
    .content
      %h2.title Give #{currency.pluralize}
      %p.address Address: #{@state.address}
      %p.description
        Your can give to others by sending #{currency.pluralize} to the address above.
      - if FaucetConfig["donation_address"]
        %p.donate
          If you want to donate to this website, you can also send #{@state.testnet? ? "real" : ""} #{FaucetConfig["donation_currency"]} to #{FaucetConfig["donation_address"]}
%section.bottom-section
  %article.state-section
    %h2.title Current state
    %p.current-balance Balance: #{pluralize @state.balance, currency}
    %p.last-transactions-intro Last transactions:
    %table.transaction-list
      %thead
        %tr
          %th.date Date (UTC)
          %th.category Category
          %th.amount Amount
          %th.address Address
          %th.confirmations Confirmations
          %th.fee Fee
      %tbody
        - (@state.last_transactions || []).reverse.each do |transaction|
          %tr.transaction-row
            %td.date= l(Time.zone.at(transaction["time"]), format: :short)
            %td.category= transaction["category"].humanize
            %td.amount= transaction["amount"]
            %td.address= transaction["address"]
            %td.confirmations= transaction["confirmations"]
            %td.fee= transaction["fee"]
    %p.pending-requests-intro Pending requests:
    %table.pending-requests
      %thead
        %tr
          %th.date Date (UTC)
          %th.address Address
      %tbody
        - CoinRequest.not_fulfilled.each do |request|
          %tr.request-row
            %td.date= l(request.created_at, format: :short)
            %td.address= request.address
%footer#footer
  .content
    .links
      = link_to "Project page", "https://github.com/sigmike/peercoin-faucet"
